#!bin/python
"""

"""
from __future__ import division
import time, glob, logging, os, traceback, argparse, sys
import gobject, gtk, numpy
from twisted.python.util import sibpath
from louie import dispatcher

# avoid segfault by importing these earlier
import panda3d.core
import pandac

from direct.task import Task
from pandac.PandaModules import loadPrcFileData

import gamescene, play
from vision import BlockHues, VideoPipeline
from sound import Sound
from config import Config

gobject.threads_init()

logging.basicConfig(level=logging.INFO)
log = logging.getLogger()

numpy.set_printoptions(precision=4, linewidth=200, suppress=True,
                       threshold=4000)

def addToolbar(wtree, label, cb):
    but1 = gtk.ToolButton(label=label)
    wtree.get_object("toolbar1").insert(but1, -1)
    but1.connect("clicked", cb)
    but1.show()

def swapInGlArea(wtree, widgetName, ga):
    oldGa = wtree.get_object(widgetName)
    ga.set_size_request(*oldGa.get_size_request())
    p = oldGa.get_parent()
    oldGa.destroy()
    p.add(ga)
    ga.show()
        
def setupAutoReload(gameScene, state):
    def reloadScene():
        t = [os.path.getmtime(f) for f in [
            'gamescene.py',
            'videowall.py',
            'play.py']]
        if t == getattr(gameScene, '_mtime', 0):
            return True
        print "\n\nreload gamescene"
        reload(gamescene)
        gameScene._mtime = t
        gameScene.__class__ = gamescene.GameScene
        try:
            gameScene.init()
        except:
            traceback.print_exc()

        reload(play)
        state.__class__ = play.GameState
            
        return True
    gobject.timeout_add(500, reloadScene)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--sound', action='store_true',
                        help='enable sound and music')
    parser.add_argument('--pipeline', action='store_true',
                        help='pipeline panel starts opened')
    parser.add_argument('--colors', nargs='*',
                        help='names of colors of your blocks (need at least 2)',
                        default=['yellow', 'green', 'blue'])
    args = parser.parse_args()

    loadPrcFileData("", "window-type none")

    import direct.directbase.DirectStart # this sticks a ton into __builtins__
    sound = Sound(loader=loader, base=base, enabled=args.sound)
    colors = args.colors

    state = play.GameState(sound, colors)

    wtree = gtk.Builder()
    wtree.add_from_file(sibpath(__file__, "ui.glade"))
    mainwin = wtree.get_object("MainWindow")
    mainwin.connect("destroy", gtk.main_quit)
    mainwin.show_all()

    wtree.get_object("pipelineSection").set_expanded(args.pipeline)
    
    addToolbar(wtree, "Force match", lambda tb: state.forceMatch())
    addToolbar(wtree, "Start timed game", lambda tb: state.timedGameMake())

    bs = BlockHues(wtree.get_object("blockHues"), colors)

    gameScene = gamescene.GameScene(wtree.get_object("gameArea"))
    gameScene.previewColor = bs.previewColor
    state.scene = gameScene

    setupAutoReload(gameScene, state)
    state.setScore = wtree.get_object("score").set_label

    dev = glob.glob("/dev/v4l/by-id/*")[0]
    vp = VideoPipeline(dev, wtree.get_object("rawVideo"),
                       wtree.get_object("hueVideo"),
                       wtree.get_object("hueMatchVideo"),
                       wtree.get_object("blobBox"),
                       adjGet=lambda n: wtree.get_object(n).get_value(),
                       blockHues=bs,
                       onFrame=state.update,
                       pipelineSection=wtree.get_object("pipelineSection"),
                       )

    config = Config(wtree, bs, dev)
    config.load()
    wtree.get_object("runV4l2ucp").connect(
        "clicked", lambda *args: os.system("v4l2ucp %s &" % dev))
    wtree.get_object("saveCameraConfig").connect(
        "clicked", config.saveCameraConfig)

    for label in ['err', 'videoStats']:
        widget = wtree.get_object(label)
        def recv(txt, widget=widget):
            widget.set_label(txt)
        dispatcher.connect(signal=label, receiver=recv, weak=False)

    state.start()
    state.sound = sound#Sound(enabled=False, idle_add=gobject.idle_add)

    def gtk_iteration(*args, **kw):
        """ We handle the gtk events in this task added to Panda TaskManager """
        while gtk.events_pending():
            gtk.main_iteration_do(False)
        return Task.cont
    taskMgr.add(gtk_iteration, "gtk")

    def animation(task):
        dt = task.time - getattr(task, 'last', 0)
        task.last = task.time
        state.update()
        gameScene.updateCubes()
        gameScene.updateLighting()
        gameScene.updateMessages()
        return Task.cont
    taskMgr.add(animation, 'animation')

    run()

main()

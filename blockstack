#!bin/python
"""

"""
from __future__ import division
import sys, time, glob, logging, json, tempfile, subprocess, os
import gobject, gtk, numpy
from gtk.gtkgl.apputils import GLArea
from twisted.python.util import sibpath
from louie import dispatcher

sys.path.append("OpenCV-2.3.1/lib") # for cv2
sys.path.append("../webcam2") # for v4laccess

from gamescene import GameScene
from play import GameState
from vision import BlockHues, VideoPipeline
from sound import Sound
from config import Config

gobject.threads_init()

logging.basicConfig(level=logging.INFO)
log = logging.getLogger()

numpy.set_printoptions(precision=4, linewidth=200, suppress=True,
                       threshold=4000)

def logTime(func):
    def inner(*args, **kw):
        t1 = time.time()
        try:
            ret = func(*args, **kw)
        finally:
            log.info("Call to %s took %.1f ms" % (
                func.__name__, 1000 * (time.time() - t1)))
        return ret
    return inner

def debug():
    from IPython.frontend.terminal.interactiveshell import TerminalInteractiveShell
    shell = TerminalInteractiveShell(user_ns=vars())
    shell.mainloop()

def addToolbar(wtree, label, cb):
    but1 = gtk.ToolButton(label=label)
    wtree.get_object("toolbar1").insert(but1, -1)
    but1.connect("clicked", cb)
    but1.show()

def swapInGlArea(wtree, widgetName, ga):
    oldGa = wtree.get_object(widgetName)
    ga.set_size_request(*oldGa.get_size_request())
    p = oldGa.get_parent()
    oldGa.destroy()
    p.add(ga)
    ga.show()
        

def main():
    sound = Sound(enabled=False, idle_add=gobject.idle_add)
    colors = ['yellow', 'green', 'blue',
              #'purple'
              ]

    state = GameState(sound, colors)

    wtree = gtk.Builder()
    wtree.add_from_file(sibpath(__file__, "ui.glade"))
    mainwin = wtree.get_object("MainWindow")
    mainwin.connect("destroy", gtk.main_quit)
    mainwin.show_all()

    addToolbar(wtree, "Force match", lambda tb: state.forceMatch())
    addToolbar(wtree, "Start timed game", lambda tb: state.startTimedGame())

    bs = BlockHues(wtree.get_object("blockHues"), colors)

    gameScene = GameScene()
    gameScene.previewColor = bs.previewColor
    state.scene = gameScene
    state.setScore = wtree.get_object("score").set_label
    state.setGameDesc = wtree.get_object("gameDesc").set_label
    ga = GLArea(gameScene)
    swapInGlArea(wtree, "gameArea", ga)

    dev = glob.glob("/dev/v4l/by-id/*")[0]
    vp = VideoPipeline(dev, wtree.get_object("rawVideo"),
                       wtree.get_object("hueVideo"),
                       wtree.get_object("hueMatchVideo"),
                       wtree.get_object("blobBox"),
                       adjGet=lambda n: wtree.get_object(n).get_value(),
                       blockHues=bs,
                       onFrame=state.onFrame,
                       cameraArea=wtree.get_object("cameraArea"),
                       pipelineSection=wtree.get_object("pipelineSection"),

                       )

    config = Config(wtree, bs, dev)
    config.load()
    wtree.get_object("runV4l2ucp").connect(
        "clicked", lambda *args: os.system("v4l2ucp %s &" % dev))
    wtree.get_object("saveCameraConfig").connect(
        "clicked", config.saveCameraConfig)

    for label in ['err', 'videoStats']:
        widget = wtree.get_object(label)
        def recv(txt, widget=widget):
            widget.set_label(txt)
        dispatcher.connect(signal=label, receiver=recv, weak=False)

    state.start()
    state.sound = Sound(enabled=True, idle_add=gobject.idle_add)
    gtk.main()

main()

#!/usr/bin/python
"""
see also:
http://developer.nomadph.com/guest001.html
"""

from __future__ import division
import sys, time, math, thread, threading, random
from math import degrees, atan2
import pygame
import Image, ImageFilter
import numpy as num
from OpenGL import GL, GLUT, GLU
from OpenGL.GL import *

from opencv import highgui

import vision
from multiimage import MultiImage


def openglSetup():
    global cardList
    GLUT.glutInit(sys.argv)

    glClearColor (0.0, 0.0, 0.0, 0.0)
    glShadeModel (GL_SMOOTH)
    glEnable(GL_COLOR_MATERIAL)

    glLightfv(GL_LIGHT0, GL_AMBIENT, [0.0, 0.0, 0.0, 1.0])
    glLightfv(GL_LIGHT0, GL_DIFFUSE, [1.0, 1.0, 1.0, 1.0])
    glLightfv(GL_LIGHT0, GL_POSITION, [0.0, 3.0, 3.0, 0.0])
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, [0.2, 0.2, 0.2, 1.0])
    glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, [0])

    #glFrontFace(GL_CW)
    glEnable(GL_LIGHTING)
    glEnable(GL_LIGHT0)
    #glEnable(GL_AUTO_NORMAL)
    #glEnable(GL_NORMALIZE)
    glEnable(GL_DEPTH_TEST) 


    glViewport (0, 0, surf.get_width(), surf.get_height())
    glMatrixMode (GL_PROJECTION)
    glLoadIdentity ()
    glFrustum (-1.0, 1.0, -1.0, 1.0, 1.5, 20.0)
    glMatrixMode (GL_MODELVIEW)

    cardList = glGenLists(1)
    glNewList(cardList, GL_COMPILE)
    glColor3f(1,1,1)
    glBegin(GL_QUADS)
    glTexCoord2f(0.0, 1.0); glVertex3f(-1.0, -1.0,  1.0)
    glTexCoord2f(1.0, 1.0); glVertex3f( 1.0, -1.0,  1.0)
    glTexCoord2f(1.0, 0.0); glVertex3f( 1.0, 1.0,  1.0)
    glTexCoord2f(0.0, 0.0); glVertex3f(-1.0, 1.0,  1.0)
    glEnd()
    glEndList()

def cube(color=(1,1,1), center=(0,0,0), side=1, wire=False):
    glColor3f(*color)
    glPushMatrix()
    glTranslatef(*center)
    if wire:
        GLUT.glutWireCube(side)
    else:
        GLUT.glutSolidCube(side)
    glPopMatrix()



def imageCard(multiImage):
    """card facing +Z from -1<x<1 -1<y<1"""
    textureData = multiImage.asImage()
    textureData = textureData.resize((256, 256)).tostring()

    glBindTexture(GL_TEXTURE_2D, 0)
    glTexImage2D( GL_TEXTURE_2D, 0, GL_RGB,
                  256, #multiImage.size()[0],
                  256, #multiImage.size()[1],
                  0,
                  GL_RGB, GL_UNSIGNED_BYTE, textureData)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)

    glCallList(cardList)


class Pose(object):
    pass

class Game(object):
    def __init__(self):
        self.pose = Pose()
        

def newPositions():
    colors = ['red', 'blue', 'green']
    random.shuffle(colors)
    orient = random.choice(['flat', 'tri', 'tall'])
    if orient == 'flat':
        return {colors[0] : (-1, .5, 0),
                colors[1] : (0, .5, 0),
                colors[2] : (1, .5, 0)}
    elif orient == 'tall':
        return {colors[0] : (0, .5, 0),
                colors[1] : (0, 1.5, 0),
                colors[2] : (0, 2.5, 0)}
    elif orient == 'tri':
        return {colors[0] : (0, .5, 0),
                colors[1] : (.5, 1.5, 0),
                colors[2] : (1, 0.5, 0)}

grabbed = [None]
positions2 = newPositions()
correctFrameStart = None

def glSetup():
    glClearColor(0.0, 0.0, 0.0, 0.0)
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity ()
    GLU.gluLookAt (0.0, 0.7, 8.0,
                   0.0, 0.5, 0.0,
                   0.0, 1.0, 0.0)

    glDisable(GL_TEXTURE_2D)

def groundPlane():
    glPushMatrix()
    glScalef(10, .01, 5)
    cube(color=(.2, .2, 1))
    glPopMatrix()

def draw (grab):
    global positions2, correctFrameStart
    t1 = time.time()

    glSetup()
    groundPlane()

    matching = False
    glPushMatrix()
    if 1:
        glTranslatef(1, -.9, 3.2)
        # flip to compensate for the camera facing the user
        glScalef(-1, 1, 1)
        
        glDisable(GL_LIGHTING)
        glEnable(GL_TEXTURE_2D)

        # without threads, i call grab() here
        grab.grab()

        if grab.lastFrame:
            imageCard(grab.lastFrame)
            if grab.lastPosition:
                for colorName, pos in grab.lastPosition.items():
                    cube(color=(x / 255 for x in vision.colors[colorName]),
                         center=(pos[0] * 2 - 1, pos[1] * 2 - 1, 1),
                         side=.1, wire=True)
                    
                matching = vision.comparePose(grab.lastPosition, positions2)

        glEnable(GL_LIGHTING)
        glDisable(GL_TEXTURE_2D)
    glPopMatrix()

    for name, pos in positions2.items():
        color = num.array(vision.colors[name]) / 255
        if matching:
            color = [.7 + .3 * x for x in color]
        cube(color=color, center=pos)

    if matching:
        if correctFrameStart is None:
            correctFrameStart = time.time()
        if time.time() > correctFrameStart + .5:
            positions2 = newPositions()
            correctFrameStart = None
            beep.play()
    else:
        correctFrameStart = None

    
    glFlush()
    pygame.display.flip()
    print "draw", time.time() - t1

class GrabFrames(object):
    def __init__(self):
        self.camera = highgui.cvCreateCameraCapture(0)

        self.lastFrame = None
        self.lastPosition = None

    def run(self):
        while 1:
            self.grab()

    def grab(self):
        t1 = time.time()

        im = highgui.cvQueryFrame(self.camera)
        newstr = im.imageData
        self.lastFrame = MultiImage(newstr, 640, 480, flipColor=True)

        #print "grab %.04f" % (time.time() - t1)

        img = self.lastFrame.asSurface()
        #surf.blit(img, (0, 0))

        position = vision.findBlocks(self.lastFrame)#, surf)
        self.lastPosition = position


        #pygame.display.update()
        

surf = pygame.display.set_mode((640, 480),
                               pygame.OPENGL |
                               pygame.DOUBLEBUF)

grab = GrabFrames()
#thread.start_new_thread(grab.run, ())
pygame.init()
beep = pygame.mixer.Sound("Question.wav")

openglSetup()

def loop():
    while 1:
        try:
            event=pygame.event.poll ()

            if event.type is pygame.QUIT:
              sys.exit(0)

            draw(grab)

            if event.type is pygame.KEYDOWN:
              if event.key is pygame.K_ESCAPE:
                sys.exit(0)
              if event.key is pygame.K_1:
                direction2=2
        except KeyboardInterrupt:
            break


def run(func, profile=True, filename="/tmp/pro"):
    if not profile:
        func()
        return
    import profile as profileMod
    import pstats
    pr = profileMod.Profile()
    pr.runcall(func)
    p = pstats.Stats(pr)
    p.sort_stats('time')
    p.print_stats(60)

run(loop, 0)
